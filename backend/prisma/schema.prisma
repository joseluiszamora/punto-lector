generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model books {
  id            String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title         String
  author        String
  cover_url     String?
  summary       String?
  review        String?
  published_at  DateTime?  @db.Date
  isbn          String?
  language      String?    @default("es")
  created_at    DateTime?  @default(now()) @db.Timestamptz(6)
  updated_at    DateTime?  @default(now()) @db.Timestamptz(6)
  author_id     String?    @db.Uuid
  author_entity authors?   @relation("BooksAuthors", fields: [author_id], references: [id], onUpdate: NoAction)
  listings      listings[]

  @@index([author_id])
}

model authors {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name       String
  bio        String?
  birth_date DateTime? @db.Date
  death_date DateTime? @db.Date
  photo_url  String?
  website    String?
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  updated_at DateTime? @default(now()) @db.Timestamptz(6)
  books      books[]   @relation("BooksAuthors")

  @@index([name])
}

model listings {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  store_id   String    @db.Uuid
  book_id    String    @db.Uuid
  price      Decimal   @db.Decimal(12, 2)
  currency   String    @default("BOB")
  stock      Int?      @default(0)
  condition  String    @default("nuevo")
  book_state Int?      @default(10) @db.SmallInt
  active     Boolean?  @default(true)
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  updated_at DateTime? @default(now()) @db.Timestamptz(6)
  books      books     @relation(fields: [book_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  stores     stores    @relation(fields: [store_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  offers     offers[]

  @@unique([store_id, book_id])
}

model offers {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  listing_id   String    @db.Uuid
  discount_pct Decimal?  @db.Decimal(5, 2)
  price_after  Decimal?  @db.Decimal(12, 2)
  start_at     DateTime? @db.Timestamptz(6)
  end_at       DateTime? @db.Timestamptz(6)
  active       Boolean?  @default(true)
  created_at   DateTime? @default(now()) @db.Timestamptz(6)
  updated_at   DateTime? @default(now()) @db.Timestamptz(6)
  listings     listings  @relation(fields: [listing_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model stores {
  id           String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  owner_uid    String     @db.Uuid
  name         String
  manager_name String?
  address      String?
  city         String?
  open_days    Int[]      @default([1, 2, 3, 4, 5])
  open_hour    String?
  close_hour   String?
  lat          Float?
  lng          Float?
  phone        String?
  description  String?
  photo_url    String?
  active       Boolean?   @default(true)
  created_at   DateTime?  @default(now()) @db.Timestamptz(6)
  updated_at   DateTime?  @default(now()) @db.Timestamptz(6)
  listings     listings[]

  @@index([lat, lng], map: "idx_stores_location")
}

model user_profiles {
  id         String    @id @db.Uuid
  email      String
  name       String?
  avatar_url String?
  role       String    @default("user")
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  updated_at DateTime? @default(now()) @db.Timestamptz(6)

  @@index([role])
  @@map("user_profiles")
}

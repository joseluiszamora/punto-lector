generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model books {
  id               String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title            String
  cover_url        String?
  summary          String?
  review           String?
  published_at     DateTime?          @db.Date
  isbn             String?
  language         String?            @default("es")
  created_at       DateTime?          @default(now()) @db.Timestamptz(6)
  updated_at       DateTime?          @default(now()) @db.Timestamptz(6)
  authors          authors[]
  listings         listings[]
  categories       categories[]
  favorites        favorites[]
  // Nuevas relaciones inversas para analítica
  search_events    search_events[]
  book_views       book_views[]
  book_stats_daily book_stats_daily[]
}

model authors {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name       String
  bio        String?
  birth_date DateTime? @db.Date
  death_date DateTime? @db.Date
  photo_url  String?
  website    String?
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  updated_at DateTime? @default(now()) @db.Timestamptz(6)
  books      books[]

  @@index([name])
}

model listings {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  store_id   String    @db.Uuid
  book_id    String    @db.Uuid
  price      Decimal   @db.Decimal(12, 2)
  currency   String    @default("BOB")
  stock      Int?      @default(0)
  condition  String    @default("nuevo")
  book_state Int?      @default(10) @db.SmallInt
  active     Boolean?  @default(true)
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  updated_at DateTime? @default(now()) @db.Timestamptz(6)
  books      books     @relation(fields: [book_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  stores     stores    @relation(fields: [store_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  offers     offers[]

  @@unique([store_id, book_id])
}

model offers {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  listing_id   String    @db.Uuid
  discount_pct Decimal?  @db.Decimal(5, 2)
  price_after  Decimal?  @db.Decimal(12, 2)
  start_at     DateTime? @db.Timestamptz(6)
  end_at       DateTime? @db.Timestamptz(6)
  active       Boolean?  @default(true)
  created_at   DateTime? @default(now()) @db.Timestamptz(6)
  updated_at   DateTime? @default(now()) @db.Timestamptz(6)
  listings     listings  @relation(fields: [listing_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model stores {
  id           String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  owner_uid    String     @db.Uuid
  name         String
  manager_name String?
  address      String?
  city         String?
  open_days    Int[]      @default([1, 2, 3, 4, 5])
  open_hour    String?
  close_hour   String?
  lat          Float?
  lng          Float?
  phone        String?
  description  String?
  photo_url    String?
  active       Boolean?   @default(true)
  created_at   DateTime?  @default(now()) @db.Timestamptz(6)
  updated_at   DateTime?  @default(now()) @db.Timestamptz(6)
  listings     listings[]

  @@index([lat, lng], map: "idx_stores_location")
}

model user_profiles {
  id             String         @id @db.Uuid
  email          String
  name           String?
  first_name     String?
  last_name      String?
  avatar_url     String?
  role           String         @default("user")
  nationality_id String?        @db.Uuid
  nationality    nationalities? @relation(fields: [nationality_id], references: [id])
  created_at     DateTime?      @default(now()) @db.Timestamptz(6)
  updated_at     DateTime?      @default(now()) @db.Timestamptz(6)
  favorites      favorites[]

  @@index([role])
  @@index([last_name, first_name])
  @@index([nationality_id])
  @@map("user_profiles")
}

model categories {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String
  description String?
  color       String?
  created_at  DateTime? @default(now()) @db.Timestamptz(6)
  updated_at  DateTime? @default(now()) @db.Timestamptz(6)
  books       books[]

  @@index([name])
}

model favorites {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id    String    @db.Uuid
  book_id    String    @db.Uuid
  created_at DateTime? @default(now()) @db.Timestamptz(6)

  user user_profiles @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  book books         @relation(fields: [book_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([user_id, book_id])
  @@index([user_id])
  @@index([book_id])
}

model synonyms {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  term       String
  synonyms   String[]
  language   String    @default("es")
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  updated_at DateTime? @default(now()) @db.Timestamptz(6)

  @@unique([term, language])
  @@map("synonyms")
}

model nationalities {
  id           String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name         String
  country_code String
  flag_url     String
  created_at   DateTime?       @default(now()) @db.Timestamptz(6)
  updated_at   DateTime?       @default(now()) @db.Timestamptz(6)
  users        user_profiles[]

  @@unique([country_code])
  @@index([name])
  @@map("nationalities")
}

/// Analítica de popularidad
model search_events {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id    String?   @db.Uuid
  q          String?
  book_id    String?   @db.Uuid
  created_at DateTime? @default(now()) @db.Timestamptz(6)

  book books? @relation(fields: [book_id], references: [id], onDelete: SetNull, onUpdate: NoAction)

  @@index([created_at])
  @@index([book_id])
  @@map("search_events")
}

model book_views {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id    String?   @db.Uuid
  book_id    String    @db.Uuid
  created_at DateTime? @default(now()) @db.Timestamptz(6)

  book books @relation(fields: [book_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([created_at])
  @@index([book_id])
  @@map("book_views")
}

model book_stats_daily {
  day       DateTime @db.Date
  book_id   String   @db.Uuid
  views     Int      @default(0)
  searches  Int      @default(0)
  favorites Int      @default(0)

  book books @relation(fields: [book_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([day, book_id])
  @@index([book_id])
  @@index([day])
  @@map("book_stats_daily")
}
